1 }, children: [_jsxs(Typography, { variant: "caption", sx: {
                                                                            color: deMinimisCheck.isCompliant ? 'green.main' : 'red.main',
                                                                            fontWeight: 600,
                                                                            fontSize: '0.8rem',
                                                                            display: 'block'
                                                                        }, children: ["\uD83D\uDCCA De Minimis Threshold: ", deMinimisCheck.isCompliant ? '✅ Compliant' : '❌ Exceeded'] }), _jsxs(Typography, { variant: "caption", sx: {
                                                                            color: deMinimisCheck.isCompliant ? 'green.600' : 'red.600',
                                                                            fontSize: '0.7rem'
                                                                        }, children: ["Non-qualifying: ", deMinimisCheck.percentage.toFixed(1), "% of total (limit: 5%) | AED ", deMinimisCheck.amount.toLocaleString(), " (limit: AED 5M)"] })] }), _jsx(Box, { sx: { mt: 2, p: 2, bgcolor: 'blue.100', borderRadius: 1 }, children: _jsxs(Typography, { variant: "caption", sx: { color: 'blue.main', fontWeight: 600, fontSize: '0.8rem' }, children: ["\uD83D\uDCC4 ", t('cit.freeZone.footnote', 'Classification per UAE Corporate Tax Law Article 18 & Cabinet Decision No. 55 of 2023')] }) })] }))] }), _jsx(Divider, { sx: { my: 2 } }), _jsxs(Box, { sx: { mb: 3 }, children: [_jsx(Typography, { variant: "body2", color: "text.secondary", gutterBottom: true, children: t('cit.calculation.citPayable') }), _jsx(Typography, { variant: "h4", sx: {
                                                            fontWeight: 600,
                                                            color: citCalculation.citPayable > 0 ? 'error.main' : 'success.main'
                                                        }, children: formatCurrency(citCalculation.citPayable) }), citCalculation.smallBusinessReliefApplied && (_jsx(Chip, { label: t('cit.calculation.smallBusinessReliefApplied'), color: "success", size: "small", sx: { mt: 1 } }))] }), _jsxs(Box, { sx: { mb: 3 }, children: [_jsx(Typography, { variant: "body2", color: "text.secondary", gutterBottom: true, children: t('cit.calculation.effectiveRate') }), _jsxs(Typography, { variant: "h6", sx: { fontWeight: 500 }, children: [citCalculation.effectiveRate.toFixed(2), "%"] })] }), _jsxs(Box, { sx: { mt: 3, display: 'flex', flexDirection: 'column', gap: 1 }, children: [_jsx(Button, { fullWidth: true, variant: "contained", startIcon: _jsx(ReceiptIcon, {}), onClick: handleGenerateFTAPDF, disabled: isCalculating || !formData.companyName || !formData.trn, sx: {
                                                            bgcolor: '#006A4E',
                                                            '&:hover': { bgcolor: '#005A42' },
                                                            fontWeight: 600
                                                        }, children: t('cit.export.generateFTAPDF', 'Generate FTA PDF') }), _jsx(Button, { fullWidth: true, variant: "outlined", startIcon: _jsx(DownloadIcon, {}), onClick: () => setShowExportDialog(true), disabled: isCalculating, children: t('cit.export.button') }), _jsx(Button, { fullWidth: true, variant: "outlined", color: "primary", onClick: () => setShowSubmissionModal(true), disabled: isCalculating || !formData.companyName || !formData.trn, startIcon: _jsx(UploadIcon, {}), children: isCalculating ? t('cit.fta.submitting') : t('cit.fta.submitToFTA') })] }), _jsx(Alert, { severity: citCalculation.citPayable === 0 ? "success" : "info", sx: { mt: 2 }, icon: citCalculation.citPayable === 0 ? _jsx(CheckCircleIcon, {}) : _jsx(InfoIcon, {}), children: _jsx(Typography, { variant: "body2", children: citCalculation.citPayable === 0
                                                        ? (citCalculation.isQFZP
                                                            ? 'No CIT due - QFZP benefits applied to qualifying income'
                                                            : t('cit.compliance.noCitDue'))
                                                        : (citCalculation.isQFZP
                                                            ? `CIT due on non-qualifying income only (QFZP)`
                                                            : t('cit.compliance.citDue')) }) })] })] }), _jsx(TaxAgentSelector, { variant: "full" })] })] }), formData.trn && formData.companyName && (_jsx(SubmissionPanel, { trn: formData.trn, companyName: formData.companyName, submissionType: "CIT", formData: formData, calculations: citCalculation, onSubmit: handleSubmitToFTA, disabled: isCalculating })), formData.trn && (_jsx(Box, { sx: { mt: 4 }, children: _jsx(SubmissionHistory, { trn: formData.trn, submissionType: "CIT", maxItems: 5 }) })), _jsxs(Dialog, { open: showExportDialog, onClose: () => setShowExportDialog(false), children: [_jsx(DialogTitle, { children: t('cit.export.title') }), _jsxs(DialogContent, { children: [_jsx(Typography, { variant: "body2", sx: { mb: 3 }, children: t('cit.export.description') }), _jsxs(Box, { sx: { display: 'flex', flexDirection: 'column', gap: 2 }, children: [_jsx(Button, { variant: "outlined", startIcon: _jsx(DownloadIcon, {}), onClick: handleExportPDF, fullWidth: true, children: t('cit.export.pdf') }), _jsx(Button, { variant: "outlined", startIcon: _jsx(DownloadIcon, {}), onClick: handleExportExcel, fullWidth: true, children: t('cit.export.excel') })] })] }), _jsx(DialogActions, { children: _jsx(Button, { onClick: () => setShowExportDialog(false), children: t('common.cancel') }) })] }), _jsx(SubmissionModal, { title: "Confirm CIT Submission", description: "Are you sure you want to submit your Corporate Income Tax return to the FTA? This action cannot be undone and the return will be officially filed.", isOpen: showSubmissionModal, isLoading: isCalculating, onClose: () => setShowSubmissionModal(false), onConfirm: async () => {
                    await handleSubmitToFTA();
                    setShowSubmissionModal(false);
                } }), _jsx(Snackbar, { open: showSuccessAlert, autoHideDuration: 4000, onClose: () => setShowSuccessAlert(false), children: _jsx(Alert, { severity: "success", onClose: () => setShowSuccessAlert(false), children: alertMessage }) }), _jsx(Snackbar, { open: showWarningAlert, autoHideDuration: 4000, onClose: () => setShowWarningAlert(false), children: _jsx(Alert, { severity: "warning", onClose: () => setShowWarningAlert(false), children: alertMessage }) }), false && (_jsx(Fab, { color: "success", onClick: () => setFreeZoneAdvisorOpen(true), className: "fixed bottom-6 right-6 bg-gradient-to-r from-emerald-500 to-teal-600 hover:from-emerald-600 hover:to-teal-700", sx: { zIndex: 1000 }, children: _jsx(Tooltip, { title: t('freeZoneAdvisor.openButton', 'Free Zone Tax Advisor'), children: _jsx(BuildingOffice2Icon, { className: "h-6 w-6 text-white" }) }) })), _jsx(FreeZoneAdvisor, { open: freeZoneAdvisorOpen, onClose: () => setFreeZoneAdvisorOpen(false), context: "cit" })] }));
};

export default CIT;