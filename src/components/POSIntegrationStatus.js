import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useTranslation } from 'react-i18next';
import { usePOSIntegration } from '../context/POSIntegrationContext';
import { CreditCardIcon, CheckCircleIcon, ArrowPathIcon } from '@heroicons/react/24/outline';
const POSIntegrationStatus = () => {
    const { t } = useTranslation();
    const { isEnabled, integrations, connectIntegration, disconnectIntegration } = usePOSIntegration();
    if (!isEnabled) {
        return (_jsx("div", { className: "bg-gray-50 dark:bg-gray-700 rounded-lg p-4 border border-gray-200 dark:border-gray-600", children: _jsxs("div", { className: "flex items-center space-x-3", children: [_jsx(CreditCardIcon, { className: "w-6 h-6 text-gray-400" }), _jsxs("div", { children: [_jsx("p", { className: "text-sm font-medium text-gray-600 dark:text-gray-400", children: t('dashboard.posIntegration.disabled', 'POS Integration Disabled') }), _jsx("p", { className: "text-xs text-gray-500 dark:text-gray-500", children: t('dashboard.posIntegration.enableHint', 'Enable in Setup to connect POS systems') })] })] }) }));
    }
    const connectedIntegrations = integrations.filter(i => i.status === 'connected');
    const hasConnections = connectedIntegrations.length > 0;
    return (_jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsx("h3", { className: "text-lg font-medium text-gray-900 dark:text-white", children: t('dashboard.posIntegration.title', 'POS & Accounting Integrations') }), _jsx("div", { className: "text-xs bg-yellow-100 dark:bg-yellow-900/20 text-yellow-800 dark:text-yellow-200 px-2 py-1 rounded", children: "MOCK" })] }), hasConnections ? (_jsxs("div", { className: "space-y-3", children: [connectedIntegrations.map((integration) => (_jsxs("div", { className: "flex items-center justify-between p-4 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg", children: [_jsxs("div", { className: "flex items-center space-x-3", children: [_jsx("span", { className: "text-2xl", children: integration.logo }), _jsxs("div", { children: [_jsx("p", { className: "text-sm font-medium text-green-900 dark:text-green-100", children: integration.name }), _jsxs("div", { className: "flex items-center space-x-2 text-xs text-green-700 dark:text-green-300", children: [_jsxs("span", { children: ["Last sync: ", new Date(integration.lastSync).toLocaleDateString()] }), _jsx("span", { children: "\u2022" }), _jsxs("span", { children: [integration.transactionCount, " transactions"] })] })] })] }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(CheckCircleIcon, { className: "w-5 h-5 text-green-500" }), _jsx("button", { onClick: () => disconnectIntegration(integration.id), className: "text-xs text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-200", children: "Disconnect" })] })] }, integration.id))), _jsx("div", { className: "text-center", children: _jsxs("button", { onClick: () => {
                                const randomIntegration = integrations.find(i => i.status === 'disconnected');
                                if (randomIntegration) {
                                    connectIntegration(randomIntegration.id);
                                }
                            }, className: "text-sm text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-200 flex items-center space-x-1 mx-auto", children: [_jsx(ArrowPathIcon, { className: "w-4 h-4" }), _jsx("span", { children: "Sync Now" })] }) })] })) : (_jsx("div", { className: "space-y-3", children: integrations.map((integration) => (_jsxs("div", { className: "flex items-center justify-between p-4 border border-gray-200 dark:border-gray-600 rounded-lg", children: [_jsxs("div", { className: "flex items-center space-x-3", children: [_jsx("span", { className: "text-2xl opacity-50", children: integration.logo }), _jsxs("div", { children: [_jsx("p", { className: "text-sm font-medium text-gray-900 dark:text-white", children: integration.name }), _jsxs("p", { className: "text-xs text-gray-500 dark:text-gray-400 capitalize", children: [integration.type, " \u2022 Not connected"] })] })] }), _jsx("button", { onClick: () => connectIntegration(integration.id), className: "text-sm bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded", children: "Connect" })] }, integration.id))) }))] }));
};
export default POSIntegrationStatus;
